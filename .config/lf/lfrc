# interpreter for shell commands (needs to be POSIX compatible)
set shell bash
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
%mkdir -p ~/.trash

cmd pasteP &{{
    load=$(lf -remote 'load')
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
        rsync -av --ignore-existing --progress $list . \
        | stdbuf -i0 -o0 -e0 tr '\r' '\n' \
        | while read line; do
            lf -remote "send $id echo $line"
        done
    elif [ $mode = 'move' ]; then
        mv -n $list .
    fi
    lf -remote 'send load'
    lf -remote 'send clear'
}}

cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd bulk-rename ${{
    old=$(mktemp)
    new=$(mktemp)
    [ -n $fs ] && fs=$(ls)
    printf "$fs\n" > $old
    printf "$fs\n" > $new
    $EDITOR $new
    [ $(cat $new | wc -l) -ne $(cat $old | wc -l) ] && exit
    paste $old $new | while read names; do
        src=$(printf $names | cut -f1)
        dst=$(printf $names | cut -f2)
        [ $src = $dst ] && continue
        [ -e $dst ] && continue
        mv $src $dst
    done
    rm $old $new
    lf -remote "send $id unselect"
}}

cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd fzf_jump ${{
   res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location')"
   if [ -f "$res" ]; then
     cmd="select"
   elif [ -d "$res" ]; then
     cmd="cd"
   fi
lf -remote "send $id $cmd \"$res\""
}}

cmd chwall ${{
    if [ -f $HOME/.config/wall.* ] ; then
        rm $HOME/.config/wall.*
    fi
    cp "$fx" "$HOME/.config/wall.${fx##*.}"
}}

# Basic binds
map E extract
map P pasteP
map V push :!vim<space>
map DD delete
map <enter> shell
map W chwall

# execute current file (must be executable)
map x $$f
map X !$f

# Archive Mappings
map A push %mkdir<space>
map az zip
map at tar
map atz targz
map au unarchive
map ab bulk-rename

# file opener
cmd open-with %"$@" $fx
map O push :open-with<space>

# Movement
map <c-f> :fzf_jump
map ~ cd ~/
map gm cd /run/media/heis
map gr cd /run
map gd cd ~/Documents
map gl cd ~/Documents/Libros
map gp cd ~/Pictures
map gv cd ~/Videos
map gM cd ~/Music
map gD cd ~/Downloads
map gcc cd ~/.config
map gcs cd ~/.config/sway
map gcp cd ~/.config/packages
map gn cd /etc/nixos
